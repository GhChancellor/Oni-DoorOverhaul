using TUNING;
using UnityEngine;

namespace Door_Overhaul
{
    /// <summary>
    /// Represents a pneumatic trap door in the game.
    /// </summary>
    internal class PneumaticTrapDoor : DoorConfig
    {
        private readonly ManagementError err =
            new("# DoorOverhaul > ", "PneumaticTrapDoor.cs > ");
        private const string buildingID = "PneumaticTrapDoor";
        private const string categoryMenu = "Base";
        private const string subCategoryID = "Door";
        private const string techID = "none";

        /// <summary>
        /// Creates the building definition for the pneumatic trap door.
        /// </summary>
        /// <returns>A BuildingDef object representing the trap door's properties.</returns>
        public override BuildingDef CreateBuildingDef()
        {
            try
            {
                /* Change construction time and mass */
                var Construction = InitiateTrapDoorBuild();
    

                // Initialize the building definition with specific parameters.
                BuildingDef buildingDef = BuildingTemplates.CreateBuildingDef(
                    id: buildingID,                                 // Unique identifier for the building
                    width: 1,                                      // Width of the building tile
                    height: 1,                                     // Height of the building tile
                    anim: "trap_door_external_kanim",              // Animation key name for the door
                    hitpoints: 30,                                 // Maximum hit points of the building
                    construction_time: Construction.constructionTime, // Time required to construct the building
                    construction_mass: Construction.constructionMass, // Mass of materials needed for construction
                    construction_materials: MATERIALS.ALL_METALS,   // Materials used in construction
                    melting_point: 1600f,                          // Temperature at which the material melts (in degrees Celsius)
                    build_location_rule: BuildLocationRule.Tile,    // Rule for determining valid build locations
                    decor: BUILDINGS.DECOR.NONE,                    // Decorative category of the building
                    noise: NOISE_POLLUTION.NONE,                    // Noise pollution generated by the building
                    temperature_modification_mass_scale: 1f         // Scaling factor for mass affecting temperature modification (default is 1)
                );

                /* Set additional properties for the building definition */
                buildingDef.Overheatable = true;
                buildingDef.Floodable = false;
                buildingDef.Entombable = false;
                buildingDef.IsFoundation = true;
                buildingDef.TileLayer = ObjectLayer.FoundationTile;
                buildingDef.AudioCategory = "Metal";
                buildingDef.PermittedRotations = PermittedRotations.R90;
                buildingDef.SceneLayer = Grid.SceneLayer.TileMain;
                buildingDef.ForegroundLayer = Grid.SceneLayer.InteriorWall;
                buildingDef.LogicInputPorts = DoorConfig.CreateSingleInputPortList(new CellOffset(0, 0));

                /* Add sound events */
                SoundEventVolumeCache.instance.AddVolume("door_internal_kanim", "Open_DoorInternal", NOISE_POLLUTION.NOISY.TIER2);
                SoundEventVolumeCache.instance.AddVolume("door_internal_kanim", "Close_DoorInternal", NOISE_POLLUTION.NOISY.TIER2);

                return buildingDef;
            }
            catch (Exception ex)
            {
                Debug.LogError(err.GetMessageAndCode() + $"1 CreateBuildingDef() {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// Performs post-configuration setup for the pneumatic trap door game object.
        /// </summary>
        /// <param name="go">The GameObject to configure.</param>
        public override void DoPostConfigureComplete(GameObject go)
        {
            try
            {
                /* Configure the door component */
                Door door = go.AddOrGet<Door>();
                door.unpoweredAnimSpeed = 1f;
                door.doorType = Door.DoorType.Internal;
                door.doorOpeningSoundEventName = "Open_DoorInternal";
                door.doorClosingSoundEventName = "Close_DoorInternal";

                /* Add new button */
                var moveButton = go.AddOrGet<MoveButton>();
                moveButton.BuildingID = buildingID;

                /* Add additional components and configure them */
                go.AddOrGet<AccessControl>().controlEnabled = true;
                go.AddOrGet<CopyBuildingSettings>().copyGroupTag = GameTags.Door;
                go.AddOrGet<Workable>().workTime = 3f;
                go.GetComponent<KBatchedAnimController>().initialAnim = "closed";
                go.AddOrGet<ZoneTile>();
                go.AddOrGet<KBoxCollider2D>();
                Prioritizable.AddRef(go);

                /* Remove the BuildingEnabledButton component */
                UnityEngine.Object.DestroyImmediate(go.GetComponent<BuildingEnabledButton>());
            }
            catch (Exception ex)
            {
                Debug.LogError(err.GetMessageAndCode() + $"2 DoPostConfigureComplete() : {ex.Message}");
            }
        }

        /// <summary>
        /// Initializes the trap door build by changing recipe values for construction mass and time.
        /// </summary>
        /// <returns>A tuple containing the construction mass array and construction time.</returns>
        private (float[] constructionMass, float constructionTime) InitiateTrapDoorBuild()
        {
            try
            {
                PneumaticTrapDoorManager pneumaticTrapDoorManager = new();

                return pneumaticTrapDoorManager.Create();
            }
            catch (Exception ex)
            {
                Debug.LogError(err.GetMessageAndCode() + $"3 InitiateTrapDoorBuild() : {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// Gets the unique identifier for this building.
        /// </summary>
        /// <returns>The building's ID.</returns>
        public static string GetBuildingID()
        {
            return buildingID;
        }

        /// <summary>
        /// Gets the category menu where this building will be displayed in the game.
        /// </summary>
        /// <returns>The category menu name.</returns>
        public static string GetCategoryMenu()
        {
            return categoryMenu;
        }

        /// <summary>
        /// Gets the subcategory ID for this building within the build menu.
        /// </summary>
        /// <returns>The subcategory ID.</returns>
        public static string GetSubCategoryID()
        {
            return subCategoryID;
        }

        /// <summary>
        /// Gets the technology required to unlock this building in the tech tree.
        /// </summary>
        /// <returns>The technology name.</returns>
        public static string GetTechID()
        {
            return techID;
        }
    }
}