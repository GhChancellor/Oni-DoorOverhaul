using TUNING;
using UnityEngine;

namespace Door_Overhaul
{
    internal class MoveButton : KMonoBehaviour
    {
#pragma warning disable CS0649
        [MyCmpGet]
        private Deconstructable deconstructable;
#pragma warning restore CS0649

        private PneumaticTrapDoorManager pneumaticTrapDoorManager;
        protected override void OnPrefabInit()
        {
            pneumaticTrapDoorManager = new PneumaticTrapDoorManager();
            base.OnPrefabInit();
            this.Subscribe((int)GameHashes.RefreshUserMenu, new System.Action<object>(OnRefreshUserMenu));
        }

        private void OnRefreshUserMenu(object data)
        {
            Game.Instance.userMenu.AddButton(
                go: this.gameObject,
                button: new KIconButtonMenu.ButtonInfo(
                    iconName: "action_mirror",
                    text: STRINGS.BUILDINGS.PREFABS.MOVEDOOR.NAME,
                    on_click: new System.Action(CopyPneumaticTrapDoor),
                    shortcutKey: Action.BuildingUtility1,
                    tooltipText: STRINGS.BUILDINGS.PREFABS.MOVEDOOR.TOOLTIP
                )
            );
        }

        private void CopyPneumaticTrapDoor()
        {
            var buildingDef = Assets.GetBuildingDef(PneumaticTrapDoor.ID);
            if (buildingDef != null)
            {
                Debug.Log("BuildingDef found for ID: " + PneumaticTrapDoor.ID);
                Debug.Log("BuildingDef name: " + buildingDef.PrefabID);

                // Utilizza la logica di copia per piazzare l'edificio
                StartBuildingPlacement(buildingDef);
            }
            else
            {
                Debug.LogError("BuildingDef not found for ID: " + PneumaticTrapDoor.ID);
            }
        }

        private void StartBuildingPlacement(BuildingDef buildingDef)
        {
            Debug.Log("Tentativo di iniziare il piazzamento per " + buildingDef.PrefabID);

            // Trova il tool di copia
            var copySettingsTool = CopySettingsTool.Instance;
            if (copySettingsTool != null)
            {
                Debug.Log("CopySettingsTool trovato");

                // Imposta il tool con il BuildingDef e attivalo
                copySettingsTool.SetSourceObject(this.gameObject);
                PlayerController.Instance.ActivateTool(copySettingsTool);

                Debug.Log("CopySettingsTool attivato con " + buildingDef.PrefabID);
            }
            else
            {
                Debug.LogError("CopySettingsTool non trovato");
            }
        }

        private void DuplicateDoor()
        {
            Destroy(deconstructable);
            PlanScreen planScreen = PlanScreen.Instance;

            var buildingDef = Assets.GetBuildingDef(BuildingID);

            if (buildingDef != null && planScreen != null)
            {
                planScreen.CopyBuildingOrder(buildingDef, BuildingID);
            }
        }           
    }
}
